From: Jan Engelhardt <jengelh@inai.de>
Date: Mon, 18 Apr 2016 17:36:20 +0200
Subject: adding additional changes due gsoap 2.8.30

Related to changes in GSOAP the code need some extra Constructors.
---
 common/include/zarafa/zcdefs.h              |  7 +++++
 provider/client/WSMAPIFolderOps.cpp         |  2 +-
 provider/client/WSMAPIPropStorage.cpp       |  2 +-
 provider/client/WSMessageStreamImporter.cpp |  4 +--
 provider/client/WSTableView.cpp             | 12 ++++-----
 provider/client/WSTransport.cpp             | 29 ++++++++++-----------
 provider/common/Makefile.am                 |  3 ++-
 provider/common/soapctor.cpp                | 40 +++++++++++++++++++++++++++++
 provider/include/ZarafaProto.h              |  9 +++++++
 provider/libserver/ECConversion.cpp         | 15 ++++++++---
 provider/libserver/ECGenProps.cpp           | 10 ++++----
 provider/libserver/ECGenericObjectTable.cpp |  2 +-
 provider/libserver/ECSessionGroup.cpp       | 10 ++++----
 provider/libserver/ECUserManagement.cpp     |  2 +-
 provider/libserver/StreamUtil.cpp           |  2 +-
 15 files changed, 107 insertions(+), 42 deletions(-)
 create mode 100644 provider/common/soapctor.cpp

diff --git a/common/include/zarafa/zcdefs.h b/common/include/zarafa/zcdefs.h
index 9ad82d6..89e25b3 100644
--- a/common/include/zarafa/zcdefs.h
+++ b/common/include/zarafa/zcdefs.h
@@ -34,4 +34,11 @@
 #	define _zcp_override
 #endif
 
+/*
+ * gsoap 2.8.30 automatically adds default constructors which zero everything.
+ * The macro is for documentation purposes for where this happens.
+ * (If you dare build with 2.8.22, expect uninitialized structs/members.)
+ */
+#define __gsoap_autoinit
+
 #endif /* ZCOMMON_DEFS_H */
diff --git a/provider/client/WSMAPIFolderOps.cpp b/provider/client/WSMAPIFolderOps.cpp
index dcd51b3..7744809 100644
--- a/provider/client/WSMAPIFolderOps.cpp
+++ b/provider/client/WSMAPIFolderOps.cpp
@@ -469,7 +469,7 @@ HRESULT WSMAPIFolderOps::HrGetChangeInfo(ULONG cbEntryID, LPENTRYID lpEntryID, L
 
 	LPSPropValue			lpSPropValPCL = NULL;
 	LPSPropValue			lpSPropValCK = NULL;
-	getChangeInfoResponse	sChangeInfo = {{0}};
+	getChangeInfoResponse sChangeInfo __gsoap_autoinit;
 
 	LockSoap();
 
diff --git a/provider/client/WSMAPIPropStorage.cpp b/provider/client/WSMAPIPropStorage.cpp
index adc6600..730466d 100644
--- a/provider/client/WSMAPIPropStorage.cpp
+++ b/provider/client/WSMAPIPropStorage.cpp
@@ -595,7 +595,7 @@ HRESULT WSMAPIPropStorage::HrLoadObject(MAPIOBJECT **lppsMapiObject)
 	HRESULT hr = hrSuccess;
 	struct loadObjectResponse sResponse;
 	MAPIOBJECT *lpsMapiObject = NULL;
-	struct notifySubscribe sNotSubscribe = {0};
+	struct notifySubscribe sNotSubscribe __gsoap_autoinit;
 
 	if (m_ulConnection) {
 		// Register notification
diff --git a/provider/client/WSMessageStreamImporter.cpp b/provider/client/WSMessageStreamImporter.cpp
index 32d57a3..8363beb 100644
--- a/provider/client/WSMessageStreamImporter.cpp
+++ b/provider/client/WSMessageStreamImporter.cpp
@@ -108,7 +108,7 @@ HRESULT WSMessageStreamImporter::Create(ULONG ulFlags, ULONG ulSyncId, ULONG cbE
 	HRESULT hr = hrSuccess;
 	entryId sEntryId = {0};
 	entryId sFolderEntryId = {0};
-	propVal sConflictItems = {0};
+	struct propVal sConflictItems __gsoap_autoinit;
 	WSMessageStreamImporterPtr ptrStreamImporter;
 	ECSyncSettings* lpSyncSettings = NULL;
 
@@ -217,7 +217,7 @@ WSMessageStreamImporter::~WSMessageStreamImporter()
 void WSMessageStreamImporter::run()
 {
 	unsigned int ulResult = 0;
-	xsd__Binary	sStreamData = {{0}};
+	struct xsd__Binary sStreamData __gsoap_autoinit;
 
 	struct soap *lpSoap = m_ptrTransport->m_lpCmd->soap;
 	propVal *lpsConflictItems = NULL;
diff --git a/provider/client/WSTableView.cpp b/provider/client/WSTableView.cpp
index 3ba198b..b4b9e5d 100644
--- a/provider/client/WSTableView.cpp
+++ b/provider/client/WSTableView.cpp
@@ -630,13 +630,13 @@ HRESULT WSTableView::HrMulti(ULONG ulDeferredFlags, LPSPropTagArray lpsPropTagAr
     HRESULT hr = hrSuccess;
     ECRESULT er = erSuccess;
     
-	struct propTagArray sColumns = {0};
-	struct tableMultiRequest sRequest = {0};
-	struct tableMultiResponse sResponse = {0};
+	struct propTagArray sColumns __gsoap_autoinit;
+	struct tableMultiRequest sRequest __gsoap_autoinit;
+	struct tableMultiResponse sResponse __gsoap_autoinit;
 	struct restrictTable *lpsRestrictTable = NULL;
-	struct tableQueryRowsRequest sQueryRows = {0};
-	struct tableSortRequest sSort = {{0}};
-	struct tableOpenRequest sOpen = {{0}};
+	struct tableQueryRowsRequest sQueryRows __gsoap_autoinit;
+	struct tableSortRequest sSort __gsoap_autoinit;
+	struct tableOpenRequest sOpen __gsoap_autoinit;
 	unsigned int i;
 	
 	memset(&sRequest, 0, sizeof(sRequest));
diff --git a/provider/client/WSTransport.cpp b/provider/client/WSTransport.cpp
index 3a86ada..99b71dc 100644
--- a/provider/client/WSTransport.cpp
+++ b/provider/client/WSTransport.cpp
@@ -1227,7 +1227,7 @@ HRESULT WSTransport::HrSubscribe(ULONG cbKey, LPBYTE lpKey, ULONG ulConnection,
 {
 	HRESULT		hr = hrSuccess;
 	ECRESULT	er = erSuccess;
-	notifySubscribe notSubscribe = {0};
+	notifySubscribe notSubscribe __gsoap_autoinit;
 
 	LockSoap();
 
@@ -1254,7 +1254,7 @@ HRESULT WSTransport::HrSubscribe(ULONG ulSyncId, ULONG ulChangeId, ULONG ulConne
 {
 	HRESULT		hr = hrSuccess;
 	ECRESULT	er = erSuccess;
-	notifySubscribe notSubscribe = {0};
+	notifySubscribe notSubscribe __gsoap_autoinit;
 
 	LockSoap();
 
@@ -1281,7 +1281,7 @@ HRESULT WSTransport::HrSubscribeMulti(const ECLISTSYNCADVISE &lstSyncAdvises, UL
 {
 	HRESULT		hr = hrSuccess;
 	ECRESULT	er = erSuccess;
-	notifySubscribeArray notSubscribeArray = {0};
+	notifySubscribeArray notSubscribeArray __gsoap_autoinit;
 	ECLISTSYNCADVISE::const_iterator iSyncAdvise;
 	unsigned	i = 0;
 	
@@ -1391,7 +1391,7 @@ HRESULT WSTransport::HrExportMessageChangesAsStream(ULONG ulFlags, ULONG ulPropT
 	sourceKeyPairArrayPtr ptrsSourceKeyPairs;
 	WSMessageStreamExporterPtr ptrStreamExporter;
 	propTagArray sPropTags = {0, 0};
-	exportMessageChangesAsStreamResponse sResponse = {{0}};
+	exportMessageChangesAsStreamResponse sResponse __gsoap_autoinit;
 
 	if (lpChanges == NULL || lpsProps == NULL) {
 		hr = MAPI_E_INVALID_PARAMETER;
@@ -2087,7 +2087,7 @@ HRESULT WSTransport::HrCreateUser(ECUSER *lpECUser, ULONG ulFlags,
 {
 	HRESULT	hr = hrSuccess;
 	ECRESULT er = erSuccess;
-	struct user	sUser = {0};
+	struct user sUser __gsoap_autoinit;
 	struct setUserResponse sResponse;
 	convert_context converter;
 
@@ -2207,7 +2207,7 @@ HRESULT WSTransport::HrSetUser(ECUSER *lpECUser, ULONG ulFlags)
 {
 	HRESULT	hr = hrSuccess;
 	ECRESULT er = erSuccess;
-	struct user	sUser = {0};
+	struct user sUser __gsoap_autoinit;
 	unsigned int result = 0;
 	convert_context	converter;
 
@@ -2515,7 +2515,7 @@ HRESULT WSTransport::HrCreateGroup(ECGROUP *lpECGroup, ULONG ulFlags,
 {
 	ECRESULT er = erSuccess;
 	HRESULT hr = hrSuccess;
-	struct group sGroup = {0};
+	struct group sGroup __gsoap_autoinit;
 	struct setGroupResponse sResponse;
 	convert_context converter;
 
@@ -2573,8 +2573,7 @@ HRESULT WSTransport::HrSetGroup(ECGROUP *lpECGroup, ULONG ulFlags)
 	ECRESULT er = erSuccess;
 	HRESULT hr = hrSuccess;
 	convert_context converter;
-
-	struct group	sGroup = {0};
+	struct group sGroup __gsoap_autoinit;
 
 	LockSoap();
 
@@ -3203,7 +3202,7 @@ HRESULT WSTransport::HrCreateCompany(ECCOMPANY *lpECCompany, ULONG ulFlags,
 {
 	ECRESULT er = erSuccess;
 	HRESULT hr = hrSuccess;
-	struct company sCompany = {0};
+	struct company sCompany __gsoap_autoinit;
 	struct setCompanyResponse sResponse;
 	convert_context	converter;
 
@@ -3288,7 +3287,7 @@ HRESULT WSTransport::HrSetCompany(ECCOMPANY *lpECCompany, ULONG ulFlags)
 {
 	ECRESULT er = erSuccess;
 	HRESULT hr = hrSuccess;
-	struct company sCompany = {0};
+	struct company sCompany __gsoap_autoinit;
 	convert_context converter;
 
 	LockSoap();
@@ -4318,7 +4317,7 @@ HRESULT WSTransport::HrResolvePseudoUrl(const char *lpszPseudoUrl, char **lppszS
 {
 	ECRESULT						er = erSuccess;
 	HRESULT							hr = hrSuccess;
-	struct resolvePseudoUrlResponse	sResponse = {0};
+	struct resolvePseudoUrlResponse sResponse __gsoap_autoinit;
 	char							*lpszServerPath = NULL;
 	unsigned int					ulLen = 0;
 	ECsResolveResult				*lpCachedResult = NULL;
@@ -4390,7 +4389,7 @@ HRESULT WSTransport::HrGetServerDetails(ECSVRNAMELIST *lpServerNameList,
 {
 	ECRESULT						er = erSuccess;
 	HRESULT							hr = hrSuccess;
-	struct getServerDetailsResponse	sResponse = {{0}};
+	struct getServerDetailsResponse sResponse __gsoap_autoinit;
 	struct mv_string8				*lpsSvrNameList = NULL;
 
 	LockSoap();
@@ -4586,7 +4585,7 @@ HRESULT WSTransport::HrGetSyncStates(const ECLISTSYNCID &lstSyncId, ECLISTSYNCST
 	HRESULT							hr = hrSuccess;
 	ECRESULT						er = erSuccess;
 	mv_long							ulaSyncId = {0};
-	getSyncStatesReponse			sResponse = {{0}};
+	getSyncStatesReponse sResponse __gsoap_autoinit;
 	ECLISTSYNCID::const_iterator	iSyncId;
 	SSyncState						sSyncState = {0};
 
@@ -5110,7 +5109,7 @@ HRESULT WSTransport::HrResetFolderCount(ULONG cbEntryId, LPENTRYID lpEntryId, UL
 	HRESULT hr = hrSuccess;
     ECRESULT er = erSuccess;
 	entryId eidFolder;
-	resetFolderCountResponse sResponse = {0};
+	resetFolderCountResponse sResponse __gsoap_autoinit;
 
 	LockSoap();
 
diff --git a/provider/common/Makefile.am b/provider/common/Makefile.am
index 14f0477..e9fe0de 100644
--- a/provider/common/Makefile.am
+++ b/provider/common/Makefile.am
@@ -21,7 +21,8 @@ libzarafacommon_la_SOURCES = SOAPUtils.cpp SOAPUtils.h \
 	ECLicenseClient.h ECLicenseClient.cpp \
 	ECSearchClient.h ECSearchClient.cpp \
 	ECOfflineState.h ECOfflineState.cpp \
-	StreamTypes.h ZarafaVersions.h
+	StreamTypes.h ZarafaVersions.h \
+	soapctor.cpp
 libzarafacommon_la_LIBADD = \
 	../../common/libzcp_common_util.la ../../common/libzcp_common_mapi.la \
 	../soap/libzarafa_soapclient.la ../../common/libzcp_common_ssl.la \
diff --git a/provider/common/soapctor.cpp b/provider/common/soapctor.cpp
new file mode 100644
index 0000000..9634928
--- /dev/null
+++ b/provider/common/soapctor.cpp
@@ -0,0 +1,40 @@
+#include "soapH.h"
+propTagArray::propTagArray(unsigned int *a, int b) :
+	__ptr(a), __size(b)
+{}
+
+sortOrder::sortOrder(unsigned int a, unsigned int b) :
+	ulPropTag(a), ulOrder(b)
+{}
+
+sortOrderArray::sortOrderArray(struct sortOrder *a, int b) :
+	__ptr(a), __size(b)
+{}
+
+notifySyncState::notifySyncState(unsigned int a, unsigned int b) :
+	ulSyncId(a), ulChangeId(b)
+{}
+
+rights::rights(unsigned int a, unsigned int b, unsigned int c, unsigned int d) :
+	ulUserid(a), ulType(b), ulRights(c), ulState(d)
+{}
+
+#if 0
+propVal::propVal(unsigned int a) :
+	ulPropTag(a)
+{}
+
+propValArray::propValArray(struct propVal *a, int b) :
+	__ptr(a), __size(b)
+{}
+
+notificationICS::notificationICS(struct xsd__base64Binary *a) :
+	pSyncState(a), ulChangeType(0)
+{}
+
+notification::notification(unsigned int a) :
+	ulConnection(a), ulEventType(0), obj(NULL), tab(NULL), newmail(NULL),
+	ics(NULL)
+{}
+
+#endif
diff --git a/provider/include/ZarafaProto.h b/provider/include/ZarafaProto.h
index 93ed2d7..5938839 100644
--- a/provider/include/ZarafaProto.h
+++ b/provider/include/ZarafaProto.h
@@ -111,16 +111,19 @@ struct propVal {
 	unsigned int ulPropTag;
 	int __union;
 	union propValData Value;
+//	propVal(unsigned int);
 };
 
 struct propValArray {
 	struct propVal *__ptr;
 	int __size;
+//	propValArray(struct propVal *, int = 0);
 };
 
 struct propTagArray {
 	unsigned int *__ptr;
 	int __size;
+	propTagArray(unsigned int *, int = 0);
 };
 
 struct entryList {
@@ -190,11 +193,13 @@ enum SortOrderType { EC_TABLE_SORT_ASCEND=0, EC_TABLE_SORT_DESCEND, EC_TABLE_SOR
 struct sortOrder {
 	unsigned int ulPropTag;
 	unsigned int ulOrder;
+	sortOrder(unsigned int, unsigned int = 0);
 };
 
 struct sortOrderArray {
 	struct sortOrder *__ptr;
 	int __size;
+	sortOrderArray(struct sortOrder *, int = 0);
 };
 
 struct ns:readPropsResponse {
@@ -347,6 +352,7 @@ struct notificationNewMail {
 struct notificationICS {
 	struct xsd__base64Binary *pSyncState;
 	unsigned int ulChangeType;
+//	notificationICS(struct xsd__base64Binary *);
 };
 
 struct notification {
@@ -356,6 +362,7 @@ struct notification {
 	struct notificationTable *tab;
 	struct notificationNewMail *newmail;
 	struct notificationICS *ics;
+//	notification(unsigned int);
 };
 
 struct notificationArray {
@@ -371,6 +378,7 @@ struct ns:notifyResponse {
 struct notifySyncState {
 	unsigned int ulSyncId;
 	unsigned int ulChangeId;
+	notifySyncState(unsigned int, unsigned int = 0);
 };
 
 struct notifySubscribe {
@@ -393,6 +401,7 @@ struct rights {
 	unsigned int ulRights;
 	unsigned int ulState;
 	entryId		 sUserId;
+	rights(unsigned int, unsigned int = 0, unsigned int = 0, unsigned int = 0);
 };
 
 struct rightsArray {
diff --git a/provider/libserver/ECConversion.cpp b/provider/libserver/ECConversion.cpp
index 1cb1bcf..92a8f09 100644
--- a/provider/libserver/ECConversion.cpp
+++ b/provider/libserver/ECConversion.cpp
@@ -216,7 +216,10 @@ SOAP_FMAC3 struct searchCriteria52X * SOAP_FMAC4 soap_in_searchCriteria52X(struc
 			return NULL;
 	}
 	else
-	{	a = (struct searchCriteria52X *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_searchCriteria, 0, sizeof(struct searchCriteria52X), 0, NULL);
+	{
+		a = static_cast<struct searchCriteria52X *>(soap_id_forward(soap,
+		    soap->href, reinterpret_cast<void **>(a), 0,
+		    SOAP_TYPE_searchCriteria, 0, sizeof(*a), 0, NULL, NULL));
 		if (soap->body && soap_element_end_in(soap, tag))
 			return NULL;
 	}
@@ -237,7 +240,10 @@ SOAP_FMAC3 struct entryList52X ** SOAP_FMAC4 soap_in_PointerToentryList52X(struc
 			return NULL;
 	}
 	else
-	{	a = (struct entryList52X **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_entryList, sizeof(struct entryList52X), 0);
+	{
+		a = static_cast<struct entryList52X **>(soap_id_lookup(soap,
+		    soap->href, reinterpret_cast<void **>(a),
+		    SOAP_TYPE_entryList, sizeof(*a), 0, NULL));
 		if (soap->body && soap_element_end_in(soap, tag))
 			return NULL;
 	}
@@ -287,7 +293,10 @@ SOAP_FMAC3 struct entryList52X * SOAP_FMAC4 soap_in_entryList52X(struct soap *so
 			return NULL;
 	}
 	else
-	{	a = (struct entryList52X *)soap_id_forward(soap, soap->href, (void**)a, 0, SOAP_TYPE_entryList, 0, sizeof(struct entryList52X), 0, NULL);
+	{
+		a = static_cast<struct entryList52X *>(soap_id_forward(soap,
+		    soap->href, reinterpret_cast<void **>(a), 0,
+		    SOAP_TYPE_entryList, 0, sizeof(*a), 0, NULL, NULL));
 		if (soap->body && soap_element_end_in(soap, tag))
 			return NULL;
 	}
diff --git a/provider/libserver/ECGenProps.cpp b/provider/libserver/ECGenProps.cpp
index b1debfb..9aa3b60 100644
--- a/provider/libserver/ECGenProps.cpp
+++ b/provider/libserver/ECGenProps.cpp
@@ -417,10 +417,10 @@ ECRESULT ECGenProps::GetPropComputedUncached(struct soap *soap, ECODStore *lpODS
 	unsigned int	ulFlags = 0;
 	unsigned int	ulUserId = 0;
 	char*			lpStoreName = NULL;
-	struct propVal	sPropVal = {0};
+	struct propVal sPropVal __gsoap_autoinit;
 
-	struct propValArray sPropValArray = {0, 0};
-	struct propTagArray sPropTagArray = {0, 0};
+	struct propValArray sPropValArray __gsoap_autoinit;
+	struct propTagArray sPropTagArray __gsoap_autoinit;
 
 	switch(PROP_ID(ulPropTag)) {
 		case PROP_ID(PR_LONGTERM_ENTRYID_FROM_TABLE):
@@ -908,8 +908,8 @@ ECRESULT ECGenProps::GetStoreName(struct soap *soap, ECSession* lpSession, unsig
 	ECRESULT			er = erSuccess;
 	unsigned int		ulUserId = 0;
 	unsigned int	    ulCompanyId = 0;
-	struct propValArray sPropValArray = {0, 0};
-	struct propTagArray sPropTagArray = {0, 0};
+	struct propValArray sPropValArray __gsoap_autoinit;
+	struct propTagArray sPropTagArray __gsoap_autoinit;
 
 	string				strFormat;
 	char*				lpStoreName = NULL;
diff --git a/provider/libserver/ECGenericObjectTable.cpp b/provider/libserver/ECGenericObjectTable.cpp
index 1f825fd..06ae075 100644
--- a/provider/libserver/ECGenericObjectTable.cpp
+++ b/provider/libserver/ECGenericObjectTable.cpp
@@ -68,7 +68,7 @@
        
 #include "ECSession.h"
 
-struct sortOrderArray sDefaultSortOrder = {0,0};
+struct sortOrderArray sDefaultSortOrder __gsoap_autoinit;
 
 #ifdef _DEBUG
 #define new DEBUG_NEW
diff --git a/provider/libserver/ECSessionGroup.cpp b/provider/libserver/ECSessionGroup.cpp
index b7a2604..f6ae952 100644
--- a/provider/libserver/ECSessionGroup.cpp
+++ b/provider/libserver/ECSessionGroup.cpp
@@ -216,7 +216,7 @@ ECRESULT ECSessionGroup::AddAdvise(ECSESSIONID ulSessionId, unsigned int ulConne
 ECRESULT ECSessionGroup::AddChangeAdvise(ECSESSIONID ulSessionId, unsigned int ulConnection, notifySyncState *lpSyncState)
 {
 	ECRESULT			er = erSuccess;
-	changeSubscribeItem sSubscribeItem = {ulSessionId, ulConnection, {0}};
+	changeSubscribeItem sSubscribeItem = {ulSessionId, ulConnection, __gsoap_autoinit};
 
 	if (lpSyncState == NULL) {
 		er = ZARAFA_E_INVALID_PARAMETER;
@@ -385,8 +385,8 @@ ECRESULT ECSessionGroup::AddNotificationTable(ECSESSIONID ulSessionId, unsigned
 ECRESULT ECSessionGroup::AddChangeNotification(const std::set<unsigned int> &syncIds, unsigned int ulChangeId, unsigned int ulChangeType)
 {
 	ECRESULT		er = erSuccess;
-	notification	notifyItem = {0};
-	notificationICS	ics = {0};
+	notification notifyItem __gsoap_autoinit;
+	notificationICS ics __gsoap_autoinit;
 	entryId			syncStateBin = {0};
 	notifySyncState	syncState = {0, ulChangeId};
 	SESSIONINFOMAP::const_iterator iterSessions;
@@ -444,8 +444,8 @@ ECRESULT ECSessionGroup::AddChangeNotification(const std::set<unsigned int> &syn
 ECRESULT ECSessionGroup::AddChangeNotification(ECSESSIONID ulSessionId, unsigned int ulConnection, unsigned int ulSyncId, unsigned long ulChangeId)
 {
 	ECRESULT		er = erSuccess;
-	notification	notifyItem = {0};
-	notificationICS	ics = {0};
+	notification notifyItem __gsoap_autoinit;
+	notificationICS ics __gsoap_autoinit;
 	entryId			syncStateBin = {0};
 
 	notifySyncState	syncState = { ulSyncId, static_cast<unsigned int>(ulChangeId) };
diff --git a/provider/libserver/ECUserManagement.cpp b/provider/libserver/ECUserManagement.cpp
index 1951d33..7d997a9 100644
--- a/provider/libserver/ECUserManagement.cpp
+++ b/provider/libserver/ECUserManagement.cpp
@@ -3751,7 +3751,7 @@ ECRESULT ECUserManagement::ConvertObjectDetailsToProps(struct soap *soap, unsign
 	unsigned int ulOrder = 0;
 	ECSecurity *lpSecurity = NULL;
 	std::string strEncExId;
-	struct propValArray sPropVals = {0};
+	struct propValArray sPropVals __gsoap_autoinit;
 	struct propValArray *lpPropVals = &sPropVals;
 	ULONG ulMapiType = 0;
 
diff --git a/provider/libserver/StreamUtil.cpp b/provider/libserver/StreamUtil.cpp
index 360ae9a..38a6935 100644
--- a/provider/libserver/StreamUtil.cpp
+++ b/provider/libserver/StreamUtil.cpp
@@ -790,7 +790,7 @@ static ECRESULT SerializeProps(ECSession *lpecSession, ECDatabase *lpDatabase,
 	unsigned int	ulCount = 0;
 
 	struct soap		*soap = NULL;
-	struct propVal	sPropVal = {0};
+	struct propVal sPropVal __gsoap_autoinit;
 
 	DB_ROW 			lpDBRow = NULL;
 	DB_LENGTHS		lpDBLen = NULL;
