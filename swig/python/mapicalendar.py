# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mapicalendar', [dirname(__file__)])
        except ImportError:
            import _mapicalendar
            return _mapicalendar
        if fp is not None:
            try:
                _mod = imp.load_module('_mapicalendar', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mapicalendar = swig_import_helper()
    del swig_import_helper
else:
    import _mapicalendar
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import mapitimezone
class PropertyPool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyPool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyPool, name)
    __repr__ = _swig_repr
    PROP_KEYWORDS = _mapicalendar.PropertyPool_PROP_KEYWORDS
    PROP_MEETINGLOCATION = _mapicalendar.PropertyPool_PROP_MEETINGLOCATION
    PROP_GOID = _mapicalendar.PropertyPool_PROP_GOID
    PROP_ISRECURRING = _mapicalendar.PropertyPool_PROP_ISRECURRING
    PROP_CLEANID = _mapicalendar.PropertyPool_PROP_CLEANID
    PROP_OWNERCRITICALCHANGE = _mapicalendar.PropertyPool_PROP_OWNERCRITICALCHANGE
    PROP_ATTENDEECRITICALCHANGE = _mapicalendar.PropertyPool_PROP_ATTENDEECRITICALCHANGE
    PROP_OLDSTART = _mapicalendar.PropertyPool_PROP_OLDSTART
    PROP_ISEXCEPTION = _mapicalendar.PropertyPool_PROP_ISEXCEPTION
    PROP_RECURSTARTTIME = _mapicalendar.PropertyPool_PROP_RECURSTARTTIME
    PROP_RECURENDTIME = _mapicalendar.PropertyPool_PROP_RECURENDTIME
    PROP_SENDASICAL = _mapicalendar.PropertyPool_PROP_SENDASICAL
    PROP_APPTSEQNR = _mapicalendar.PropertyPool_PROP_APPTSEQNR
    PROP_APPTSEQTIME = _mapicalendar.PropertyPool_PROP_APPTSEQTIME
    PROP_BUSYSTATUS = _mapicalendar.PropertyPool_PROP_BUSYSTATUS
    PROP_APPTAUXFLAGS = _mapicalendar.PropertyPool_PROP_APPTAUXFLAGS
    PROP_LOCATION = _mapicalendar.PropertyPool_PROP_LOCATION
    PROP_LABEL = _mapicalendar.PropertyPool_PROP_LABEL
    PROP_APPTSTARTWHOLE = _mapicalendar.PropertyPool_PROP_APPTSTARTWHOLE
    PROP_APPTENDWHOLE = _mapicalendar.PropertyPool_PROP_APPTENDWHOLE
    PROP_APPTDURATION = _mapicalendar.PropertyPool_PROP_APPTDURATION
    PROP_ALLDAYEVENT = _mapicalendar.PropertyPool_PROP_ALLDAYEVENT
    PROP_RECURRENCESTATE = _mapicalendar.PropertyPool_PROP_RECURRENCESTATE
    PROP_MEETINGSTATUS = _mapicalendar.PropertyPool_PROP_MEETINGSTATUS
    PROP_RESPONSESTATUS = _mapicalendar.PropertyPool_PROP_RESPONSESTATUS
    PROP_RECURRING = _mapicalendar.PropertyPool_PROP_RECURRING
    PROP_INTENDEDBUSYSTATUS = _mapicalendar.PropertyPool_PROP_INTENDEDBUSYSTATUS
    PROP_RECURRINGBASE = _mapicalendar.PropertyPool_PROP_RECURRINGBASE
    PROP_REQUESTSENT = _mapicalendar.PropertyPool_PROP_REQUESTSENT
    PROP_APPTREPLYNAME = _mapicalendar.PropertyPool_PROP_APPTREPLYNAME
    PROP_RECURRENCETYPE = _mapicalendar.PropertyPool_PROP_RECURRENCETYPE
    PROP_RECURRENCEPATTERN = _mapicalendar.PropertyPool_PROP_RECURRENCEPATTERN
    PROP_TIMEZONEDATA = _mapicalendar.PropertyPool_PROP_TIMEZONEDATA
    PROP_TIMEZONE = _mapicalendar.PropertyPool_PROP_TIMEZONE
    PROP_RECURRENCE_START = _mapicalendar.PropertyPool_PROP_RECURRENCE_START
    PROP_RECURRENCE_END = _mapicalendar.PropertyPool_PROP_RECURRENCE_END
    PROP_ALLATTENDEESSTRING = _mapicalendar.PropertyPool_PROP_ALLATTENDEESSTRING
    PROP_TOATTENDEESSTRING = _mapicalendar.PropertyPool_PROP_TOATTENDEESSTRING
    PROP_CCATTENDEESSTRING = _mapicalendar.PropertyPool_PROP_CCATTENDEESSTRING
    PROP_NETMEETINGTYPE = _mapicalendar.PropertyPool_PROP_NETMEETINGTYPE
    PROP_NETMEETINGSERVER = _mapicalendar.PropertyPool_PROP_NETMEETINGSERVER
    PROP_NETMEETINGORGANIZERALIAS = _mapicalendar.PropertyPool_PROP_NETMEETINGORGANIZERALIAS
    PROP_NETMEETINGAUTOSTART = _mapicalendar.PropertyPool_PROP_NETMEETINGAUTOSTART
    PROP_AUTOSTARTWHEN = _mapicalendar.PropertyPool_PROP_AUTOSTARTWHEN
    PROP_CONFERENCESERVERALLOWEXTERNAL = _mapicalendar.PropertyPool_PROP_CONFERENCESERVERALLOWEXTERNAL
    PROP_NETMEETINGDOCPATHNAME = _mapicalendar.PropertyPool_PROP_NETMEETINGDOCPATHNAME
    PROP_NETSHOWURL = _mapicalendar.PropertyPool_PROP_NETSHOWURL
    PROP_CONVERENCESERVERPASSWORD = _mapicalendar.PropertyPool_PROP_CONVERENCESERVERPASSWORD
    PROP_APPTREPLYTIME = _mapicalendar.PropertyPool_PROP_APPTREPLYTIME
    PROP_REMINDERMINUTESBEFORESTART = _mapicalendar.PropertyPool_PROP_REMINDERMINUTESBEFORESTART
    PROP_REMINDERTIME = _mapicalendar.PropertyPool_PROP_REMINDERTIME
    PROP_REMINDERSET = _mapicalendar.PropertyPool_PROP_REMINDERSET
    PROP_PRIVATE = _mapicalendar.PropertyPool_PROP_PRIVATE
    PROP_NOAGING = _mapicalendar.PropertyPool_PROP_NOAGING
    PROP_SIDEEFFECT = _mapicalendar.PropertyPool_PROP_SIDEEFFECT
    PROP_REMOTESTATUS = _mapicalendar.PropertyPool_PROP_REMOTESTATUS
    PROP_COMMONSTART = _mapicalendar.PropertyPool_PROP_COMMONSTART
    PROP_COMMONEND = _mapicalendar.PropertyPool_PROP_COMMONEND
    PROP_COMMONASSIGN = _mapicalendar.PropertyPool_PROP_COMMONASSIGN
    PROP_CONTACTS = _mapicalendar.PropertyPool_PROP_CONTACTS
    PROP_OUTLOOKINTERNALVERSION = _mapicalendar.PropertyPool_PROP_OUTLOOKINTERNALVERSION
    PROP_OUTLOOKVERSION = _mapicalendar.PropertyPool_PROP_OUTLOOKVERSION
    PROP_REMINDERNEXTTIME = _mapicalendar.PropertyPool_PROP_REMINDERNEXTTIME
    PROP_HIDE_ATTACH = _mapicalendar.PropertyPool_PROP_HIDE_ATTACH
    PROP_TASK_STATUS = _mapicalendar.PropertyPool_PROP_TASK_STATUS
    PROP_TASK_COMPLETE = _mapicalendar.PropertyPool_PROP_TASK_COMPLETE
    PROP_TASK_PERCENTCOMPLETE = _mapicalendar.PropertyPool_PROP_TASK_PERCENTCOMPLETE
    PROP_TASK_STARTDATE = _mapicalendar.PropertyPool_PROP_TASK_STARTDATE
    PROP_TASK_DUEDATE = _mapicalendar.PropertyPool_PROP_TASK_DUEDATE
    PROP_TASK_RECURRSTATE = _mapicalendar.PropertyPool_PROP_TASK_RECURRSTATE
    PROP_TASK_ISRECURRING = _mapicalendar.PropertyPool_PROP_TASK_ISRECURRING
    PROP_TASK_COMPLETED_DATE = _mapicalendar.PropertyPool_PROP_TASK_COMPLETED_DATE
    PROP_APPTTZDEFSTARTDISP = _mapicalendar.PropertyPool_PROP_APPTTZDEFSTARTDISP
    PROP_APPTTZDEFENDDISP = _mapicalendar.PropertyPool_PROP_APPTTZDEFENDDISP
    PROP_APPTTZDEFRECUR = _mapicalendar.PropertyPool_PROP_APPTTZDEFRECUR
    SIZE_NAMEDPROPS = _mapicalendar.PropertyPool_SIZE_NAMEDPROPS
    def __init__(self, *args): 
        this = _mapicalendar.new_PropertyPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapicalendar.delete_PropertyPool
    __del__ = lambda self : None;
    __swig_getmethods__["GetPropIdAndType"] = lambda x: _mapicalendar.PropertyPool_GetPropIdAndType
    if _newclass:GetPropIdAndType = staticmethod(_mapicalendar.PropertyPool_GetPropIdAndType)
    def GetRequiredPropTags(self, *args): return _mapicalendar.PropertyPool_GetRequiredPropTags(self, *args)
    def GetPropTag(self, *args): return _mapicalendar.PropertyPool_GetPropTag(self, *args)
PropertyPool_swigregister = _mapicalendar.PropertyPool_swigregister
PropertyPool_swigregister(PropertyPool)

def PropertyPool_GetPropIdAndType(*args):
  return _mapicalendar.PropertyPool_GetPropIdAndType(*args)
PropertyPool_GetPropIdAndType = _mapicalendar.PropertyPool_GetPropIdAndType

class IOccurrence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOccurrence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOccurrence, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetStartDateTime(self, *args): return _mapicalendar.IOccurrence_SetStartDateTime(self, *args)
    def GetStartDateTime(self, *args): return _mapicalendar.IOccurrence_GetStartDateTime(self, *args)
    def SetEndDateTime(self, *args): return _mapicalendar.IOccurrence_SetEndDateTime(self, *args)
    def GetEndDateTime(self, *args): return _mapicalendar.IOccurrence_GetEndDateTime(self, *args)
    def GetDuration(self): return _mapicalendar.IOccurrence_GetDuration(self)
    def SetBusyStatus(self, *args): return _mapicalendar.IOccurrence_SetBusyStatus(self, *args)
    def GetBusyStatus(self): return _mapicalendar.IOccurrence_GetBusyStatus(self)
    def SetLocation(self, *args): return _mapicalendar.IOccurrence_SetLocation(self, *args)
    def GetLocation(self, *args): return _mapicalendar.IOccurrence_GetLocation(self, *args)
    def SetReminderSet(self, *args): return _mapicalendar.IOccurrence_SetReminderSet(self, *args)
    def GetReminderSet(self): return _mapicalendar.IOccurrence_GetReminderSet(self)
    def SetReminderDelta(self, *args): return _mapicalendar.IOccurrence_SetReminderDelta(self, *args)
    def GetReminderDelta(self): return _mapicalendar.IOccurrence_GetReminderDelta(self)
    def SetSubject(self, *args): return _mapicalendar.IOccurrence_SetSubject(self, *args)
    def GetSubject(self, *args): return _mapicalendar.IOccurrence_GetSubject(self, *args)
    def SetMeetingType(self, *args): return _mapicalendar.IOccurrence_SetMeetingType(self, *args)
    def GetMeetingType(self): return _mapicalendar.IOccurrence_GetMeetingType(self)
    def SetSubType(self, *args): return _mapicalendar.IOccurrence_SetSubType(self, *args)
    def GetSubType(self): return _mapicalendar.IOccurrence_GetSubType(self)
    def GetIsException(self): return _mapicalendar.IOccurrence_GetIsException(self)
    def GetHasAttach(self): return _mapicalendar.IOccurrence_GetHasAttach(self)
    def GetItemType(self): return _mapicalendar.IOccurrence_GetItemType(self)
    def GetOriginalStartDateTime(self, *args): return _mapicalendar.IOccurrence_GetOriginalStartDateTime(self, *args)
    def GetBaseDate(self): return _mapicalendar.IOccurrence_GetBaseDate(self)
    def GetMapiMessage(self, *args): return _mapicalendar.IOccurrence_GetMapiMessage(self, *args)
    def ApplyChanges(self): return _mapicalendar.IOccurrence_ApplyChanges(self)
    __swig_destroy__ = _mapicalendar.delete_IOccurrence
    __del__ = lambda self : None;
IOccurrence_swigregister = _mapicalendar.IOccurrence_swigregister
IOccurrence_swigregister(IOccurrence)

class IAppointment(IOccurrence):
    __swig_setmethods__ = {}
    for _s in [IOccurrence]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAppointment, name, value)
    __swig_getmethods__ = {}
    for _s in [IOccurrence]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IAppointment, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetRecurrence(self, *args): return _mapicalendar.IAppointment_SetRecurrence(self, *args)
    def GetRecurrence(self): return _mapicalendar.IAppointment_GetRecurrence(self)
    def SetRecurrenceTimezone(self, *args): return _mapicalendar.IAppointment_SetRecurrenceTimezone(self, *args)
    def GetRecurrenceTimezone(self): return _mapicalendar.IAppointment_GetRecurrenceTimezone(self)
    def GetBounds(self): return _mapicalendar.IAppointment_GetBounds(self)
    def GetOccurrence(self, *args): return _mapicalendar.IAppointment_GetOccurrence(self, *args)
    def RemoveOccurrence(self, *args): return _mapicalendar.IAppointment_RemoveOccurrence(self, *args)
    def ResetOccurrence(self, *args): return _mapicalendar.IAppointment_ResetOccurrence(self, *args)
    def GetExceptions(self): return _mapicalendar.IAppointment_GetExceptions(self)
    def GetBaseDateForOccurrence(self, *args): return _mapicalendar.IAppointment_GetBaseDateForOccurrence(self, *args)
    __swig_destroy__ = _mapicalendar.delete_IAppointment
    __del__ = lambda self : None;
IAppointment_swigregister = _mapicalendar.IAppointment_swigregister
IAppointment_swigregister(IAppointment)

ITEMTYPE_SINGLE = _mapicalendar.ITEMTYPE_SINGLE
ITEMTYPE_OCCURRENCE = _mapicalendar.ITEMTYPE_OCCURRENCE
ITEMTYPE_EXCEPTION = _mapicalendar.ITEMTYPE_EXCEPTION
ITEMTYPE_RECURRINGMASTER = _mapicalendar.ITEMTYPE_RECURRINGMASTER
MSGTYPE_DEFAULT = _mapicalendar.MSGTYPE_DEFAULT
MSGTYPE_MASTER = _mapicalendar.MSGTYPE_MASTER
MSGTYPE_OCCURRENCE = _mapicalendar.MSGTYPE_OCCURRENCE
MSGTYPE_COMPOSITE = _mapicalendar.MSGTYPE_COMPOSITE
ENSURE_OVERRIDE_ATTACHMENTS = _mapicalendar.ENSURE_OVERRIDE_ATTACHMENTS
class IRecurrencePatternInspector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRecurrencePatternInspector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IRecurrencePatternInspector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetPatternDaily(self, *args): return _mapicalendar.IRecurrencePatternInspector_SetPatternDaily(self, *args)
    def SetPatternWorkDays(self): return _mapicalendar.IRecurrencePatternInspector_SetPatternWorkDays(self)
    def SetPatternWeekly(self, *args): return _mapicalendar.IRecurrencePatternInspector_SetPatternWeekly(self, *args)
    def SetPatternAbsoluteMonthly(self, *args): return _mapicalendar.IRecurrencePatternInspector_SetPatternAbsoluteMonthly(self, *args)
    def SetPatternRelativeMonthly(self, *args): return _mapicalendar.IRecurrencePatternInspector_SetPatternRelativeMonthly(self, *args)
    def SetPatternAbsoluteYearly(self, *args): return _mapicalendar.IRecurrencePatternInspector_SetPatternAbsoluteYearly(self, *args)
    def SetPatternRelativeYearly(self, *args): return _mapicalendar.IRecurrencePatternInspector_SetPatternRelativeYearly(self, *args)
    def SetRangeNoEnd(self, *args): return _mapicalendar.IRecurrencePatternInspector_SetRangeNoEnd(self, *args)
    def SetRangeNumbered(self, *args): return _mapicalendar.IRecurrencePatternInspector_SetRangeNumbered(self, *args)
    def SetRangeEndDate(self, *args): return _mapicalendar.IRecurrencePatternInspector_SetRangeEndDate(self, *args)
    __swig_destroy__ = _mapicalendar.delete_IRecurrencePatternInspector
    __del__ = lambda self : None;
IRecurrencePatternInspector_swigregister = _mapicalendar.IRecurrencePatternInspector_swigregister
IRecurrencePatternInspector_swigregister(IRecurrencePatternInspector)

def CreateAppointment(*args):
  return _mapicalendar.CreateAppointment(*args)
CreateAppointment = _mapicalendar.CreateAppointment

class RecurrencePattern(IRecurrencePatternInspector):
    __swig_setmethods__ = {}
    for _s in [IRecurrencePatternInspector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecurrencePattern, name, value)
    __swig_getmethods__ = {}
    for _s in [IRecurrencePatternInspector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecurrencePattern, name)
    __repr__ = _swig_repr
    def SetPatternDaily(self, *args): return _mapicalendar.RecurrencePattern_SetPatternDaily(self, *args)
    def SetPatternWorkDays(self): return _mapicalendar.RecurrencePattern_SetPatternWorkDays(self)
    def SetPatternWeekly(self, *args): return _mapicalendar.RecurrencePattern_SetPatternWeekly(self, *args)
    def SetPatternAbsoluteMonthly(self, *args): return _mapicalendar.RecurrencePattern_SetPatternAbsoluteMonthly(self, *args)
    def SetPatternRelativeMonthly(self, *args): return _mapicalendar.RecurrencePattern_SetPatternRelativeMonthly(self, *args)
    def SetPatternAbsoluteYearly(self, *args): return _mapicalendar.RecurrencePattern_SetPatternAbsoluteYearly(self, *args)
    def SetPatternRelativeYearly(self, *args): return _mapicalendar.RecurrencePattern_SetPatternRelativeYearly(self, *args)
    def SetRangeNoEnd(self, *args): return _mapicalendar.RecurrencePattern_SetRangeNoEnd(self, *args)
    def SetRangeNumbered(self, *args): return _mapicalendar.RecurrencePattern_SetRangeNumbered(self, *args)
    def SetRangeEndDate(self, *args): return _mapicalendar.RecurrencePattern_SetRangeEndDate(self, *args)
    def GetPatternType(self): return _mapicalendar.RecurrencePattern_GetPatternType(self)
    def GetPatternDaily(self): return _mapicalendar.RecurrencePattern_GetPatternDaily(self)
    def GetPatternWorkDays(self): return _mapicalendar.RecurrencePattern_GetPatternWorkDays(self)
    def GetPatternWeekly(self): return _mapicalendar.RecurrencePattern_GetPatternWeekly(self)
    def GetPatternAbsoluteMonthly(self): return _mapicalendar.RecurrencePattern_GetPatternAbsoluteMonthly(self)
    def GetPatternRelativeMonthly(self): return _mapicalendar.RecurrencePattern_GetPatternRelativeMonthly(self)
    def GetPatternAbsoluteYearly(self): return _mapicalendar.RecurrencePattern_GetPatternAbsoluteYearly(self)
    def GetPatternRelativeYearly(self): return _mapicalendar.RecurrencePattern_GetPatternRelativeYearly(self)
    def GetRangeType(self): return _mapicalendar.RecurrencePattern_GetRangeType(self)
    def GetRangeNoEnd(self): return _mapicalendar.RecurrencePattern_GetRangeNoEnd(self)
    def GetRangeNumbered(self): return _mapicalendar.RecurrencePattern_GetRangeNumbered(self)
    def GetRangeEndDate(self): return _mapicalendar.RecurrencePattern_GetRangeEndDate(self)
    def Inspect(self, *args): return _mapicalendar.RecurrencePattern_Inspect(self, *args)
    def Clone(self): return _mapicalendar.RecurrencePattern_Clone(self)
    def UpdateState(self, *args): return _mapicalendar.RecurrencePattern_UpdateState(self, *args)
    def IsOccurrence(self, *args): return _mapicalendar.RecurrencePattern_IsOccurrence(self, *args)
    def GetOccurrence(self, *args): return _mapicalendar.RecurrencePattern_GetOccurrence(self, *args)
    def GetOccurrencesInRange(self, *args): return _mapicalendar.RecurrencePattern_GetOccurrencesInRange(self, *args)
    def GetBounds(self): return _mapicalendar.RecurrencePattern_GetBounds(self)
    def __init__(self, *args): 
        this = _mapicalendar.new_RecurrencePattern(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapicalendar.delete_RecurrencePattern
    __del__ = lambda self : None;
RecurrencePattern_swigregister = _mapicalendar.RecurrencePattern_swigregister
RecurrencePattern_swigregister(RecurrencePattern)

class RecurrencePatternInspector(IRecurrencePatternInspector):
    __swig_setmethods__ = {}
    for _s in [IRecurrencePatternInspector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecurrencePatternInspector, name, value)
    __swig_getmethods__ = {}
    for _s in [IRecurrencePatternInspector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecurrencePatternInspector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == RecurrencePatternInspector:
            _self = None
        else:
            _self = self
        this = _mapicalendar.new_RecurrencePatternInspector(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapicalendar.delete_RecurrencePatternInspector
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _mapicalendar.disown_RecurrencePatternInspector(self)
        return weakref_proxy(self)
RecurrencePatternInspector_swigregister = _mapicalendar.RecurrencePatternInspector_swigregister
RecurrencePatternInspector_swigregister(RecurrencePatternInspector)


def GetExpandedCalendarTable(*args):
  return _mapicalendar.GetExpandedCalendarTable(*args)
GetExpandedCalendarTable = _mapicalendar.GetExpandedCalendarTable

def ToFileTime(*args):
  return _mapicalendar.ToFileTime(*args)
ToFileTime = _mapicalendar.ToFileTime

def ToUnixTime(*args):
  return _mapicalendar.ToUnixTime(*args)
ToUnixTime = _mapicalendar.ToUnixTime

def ToYMD(*args):
  return _mapicalendar.ToYMD(*args)
ToYMD = _mapicalendar.ToYMD


def ToBaseDate(*args):
  return _mapicalendar.ToBaseDate(*args)
ToBaseDate = _mapicalendar.ToBaseDate

