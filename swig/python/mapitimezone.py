# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mapitimezone', [dirname(__file__)])
        except ImportError:
            import _mapitimezone
            return _mapitimezone
        if fp is not None:
            try:
                _mod = imp.load_module('_mapitimezone', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mapitimezone = swig_import_helper()
    del swig_import_helper
else:
    import _mapitimezone
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class TimezoneRule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimezoneRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimezoneRule, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["FromBlob"] = lambda x: _mapitimezone.TimezoneRule_FromBlob
    if _newclass:FromBlob = staticmethod(_mapitimezone.TimezoneRule_FromBlob)
    __swig_getmethods__["FromTZREGBlob"] = lambda x: _mapitimezone.TimezoneRule_FromTZREGBlob
    if _newclass:FromTZREGBlob = staticmethod(_mapitimezone.TimezoneRule_FromTZREGBlob)
    __swig_getmethods__["FromRuleData"] = lambda x: _mapitimezone.TimezoneRule_FromRuleData
    if _newclass:FromRuleData = staticmethod(_mapitimezone.TimezoneRule_FromRuleData)
    def ToTZSTRUCT(self): return _mapitimezone.TimezoneRule_ToTZSTRUCT(self)
    def ToTZREG(self, *args): return _mapitimezone.TimezoneRule_ToTZREG(self, *args)
    def Compare(self, *args): return _mapitimezone.TimezoneRule_Compare(self, *args)
    def ToUTC(self, *args): return _mapitimezone.TimezoneRule_ToUTC(self, *args)
    def FromUTC(self, *args): return _mapitimezone.TimezoneRule_FromUTC(self, *args)
    def GetRuleData(self): return _mapitimezone.TimezoneRule_GetRuleData(self)
    __swig_destroy__ = _mapitimezone.delete_TimezoneRule
    __del__ = lambda self : None;
TimezoneRule_swigregister = _mapitimezone.TimezoneRule_swigregister
TimezoneRule_swigregister(TimezoneRule)

def TimezoneRule_FromBlob(*args):
  return _mapitimezone.TimezoneRule_FromBlob(*args)
TimezoneRule_FromBlob = _mapitimezone.TimezoneRule_FromBlob

def TimezoneRule_FromTZREGBlob(*args):
  return _mapitimezone.TimezoneRule_FromTZREGBlob(*args)
TimezoneRule_FromTZREGBlob = _mapitimezone.TimezoneRule_FromTZREGBlob

def TimezoneRule_FromRuleData(*args):
  return _mapitimezone.TimezoneRule_FromRuleData(*args)
TimezoneRule_FromRuleData = _mapitimezone.TimezoneRule_FromRuleData

class TimezoneDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimezoneDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimezoneDefinition, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["FromBlob"] = lambda x: _mapitimezone.TimezoneDefinition_FromBlob
    if _newclass:FromBlob = staticmethod(_mapitimezone.TimezoneDefinition_FromBlob)
    def ToTZDEFINITION(self, *args): return _mapitimezone.TimezoneDefinition_ToTZDEFINITION(self, *args)
    def ToTZSTRUCT(self, *args): return _mapitimezone.TimezoneDefinition_ToTZSTRUCT(self, *args)
    def ToUTC(self, *args): return _mapitimezone.TimezoneDefinition_ToUTC(self, *args)
    def FromUTC(self, *args): return _mapitimezone.TimezoneDefinition_FromUTC(self, *args)
    def GetEffectiveRule(self, *args): return _mapitimezone.TimezoneDefinition_GetEffectiveRule(self, *args)
    def ContainsRule(self, *args): return _mapitimezone.TimezoneDefinition_ContainsRule(self, *args)
    def GetName(self): return _mapitimezone.TimezoneDefinition_GetName(self)
    def GetDisplayName(self): return _mapitimezone.TimezoneDefinition_GetDisplayName(self)
    def GetGUID(self): return _mapitimezone.TimezoneDefinition_GetGUID(self)
    __swig_destroy__ = _mapitimezone.delete_TimezoneDefinition
    __del__ = lambda self : None;
TimezoneDefinition_swigregister = _mapitimezone.TimezoneDefinition_swigregister
TimezoneDefinition_swigregister(TimezoneDefinition)

def TimezoneDefinition_FromBlob(*args):
  return _mapitimezone.TimezoneDefinition_FromBlob(*args)
TimezoneDefinition_FromBlob = _mapitimezone.TimezoneDefinition_FromBlob


def HrGetTZDefByName(*args):
  return _mapitimezone.HrGetTZDefByName(*args)
HrGetTZDefByName = _mapitimezone.HrGetTZDefByName

def HrGetTZNames():
  return _mapitimezone.HrGetTZNames()
HrGetTZNames = _mapitimezone.HrGetTZNames

def HrGetTZNameFromOlsonName(*args):
  return _mapitimezone.HrGetTZNameFromOlsonName(*args)
HrGetTZNameFromOlsonName = _mapitimezone.HrGetTZNameFromOlsonName

def HrDetectSystemTZName():
  return _mapitimezone.HrDetectSystemTZName()
HrDetectSystemTZName = _mapitimezone.HrDetectSystemTZName


def HrGetTZNameByRule(*args):
  return _mapitimezone.HrGetTZNameByRule(*args)
HrGetTZNameByRule = _mapitimezone.HrGetTZNameByRule

